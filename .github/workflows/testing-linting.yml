name: 'ðŸ”­ Testing and Linting'

on:
  push:
    branches: [ "dev", "master", "unittest" ]
  pull_request:
    branches: [ "dev", "unittest" ]

permissions:
  contents: read

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Perform Code Linting with flake8
        run: |
          flake8 .

      - name: Perform Code Linting with pylint
        run: |
          pylint $(git ls-files '*.py')

  unittest-codecov:
    strategy:
      matrix:
        python-version: [ "3.8", "3.9", "3.10" ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    needs: linting
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock requests-mock
          pip install -r requirements.txt

      - name: Run Unit Tests with pytest and Coverage
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term-missing

  summary:
    needs:
      - unittest-codecov
      - linting

    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3

      # Collect coverage reports generated by each matrix job
      - name: 'Collect Coverage Reports'
        run: |
          mkdir -p coverage-reports
          find . -type f -name "coverage.xml" -exec mv {} coverage-reports/ \;

      # Upload the collected coverage reports as a single artifact
      - name: 'Upload Code Coverage Reports'
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-reports
          path: coverage-reports

      - name: 'Send Notification'
        run: echo "The workflow has completed successfully."
